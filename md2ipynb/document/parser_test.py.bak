# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

import tempfile
import unittest

from .document import Document
from .paragraph import Paragraph
from .parser import Parser
from .text import Text
from .token import Token

p = Parser()
A = Token.Text('A', 'A', 1, 1)
B = Token.Text('B', 'B', 2, 1)
C = Token.Text('C', 'C', 3, 1)
EOF = Token.EOF('', 4, 1)


class ParserTest(unittest.TestCase):
    # with_lookahead
    def test_with_lookahead_empty(self) -> None:
        with self.assertRaises(RuntimeError):
            list(p.with_lookahead([]))

    def test_with_lookahead_without_eof(self) -> None:
        with self.assertRaises(RuntimeError):
            list(p.with_lookahead([A]))

    def test_with_lookahead_eof(self) -> None:
        self.assertEqual(list(p.with_lookahead([EOF])), [(EOF, EOF)])

    def test_with_lookahead_single(self) -> None:
        self.assertEqual(
            list(p.with_lookahead([A, EOF])), [(A, EOF), (EOF, EOF)])

    def test_with_lookahead_multiple(self) -> None:
        self.assertEqual(
            list(p.with_lookahead([A, B, C, EOF])),
            [(A, B), (B, C), (C, EOF), (EOF, EOF)])

    # parse_paragraph_element
    def test_parse_paragraph_element_empty(self) -> None:
        p._init_parser([])
        with self.assertRaises(StopIteration):
            p._parse_paragraph_element('p')

    def test_parse_paragraph_element_text(self) -> None:
        p._init_parser(['A'])
        self.assertEqual(p._parse_paragraph_element('p'), Text('A'))

    def test_parse_paragraph_element_any_to_text(self) -> None:
        p._init_parser(['#'])
        self.assertEqual(p._parse_paragraph_element('p'), Text('#'))

    # parse_paragraph
    def test_parse_paragraph_empty(self) -> None:
        p._init_parser([])
        self.assertEqual(p._parse_paragraph(), Paragraph())

    def test_parse_paragraph_single(self) -> None:
        p._init_parser(['A'])
        self.assertEqual(p._parse_paragraph(), Paragraph([Text('A')]))

    def test_parse_paragraph_single_line_multiple_tokens(self) -> None:
        p._init_parser(['A ~~ ~~'])
        self.assertEqual(
            p._parse_paragraph(),
            Paragraph([Text('A '), Text('~~'), Text(' '), Text('~~')]))

    def test_parse_paragraph_multiple(self) -> None:
        p._init_parser(['A', 'B', 'C'])
        self.assertEqual(
            p._parse_paragraph(),
            Paragraph([Text('A'), Text('B'), Text('C')]))

    def test_parse_paragraph_end(self) -> None:
        p._init_parser(['A', 'B', 'C', '', 'D'])
        self.assertEqual(
            p._parse_paragraph(),
            Paragraph([Text('A'), Text('B'), Text('C')]))

    # parse_header
    def test_parse_header_empty(self) -> None:
        p._init_parser([])
        with self.assertRaises(SyntaxError):
            p._parse_header()

    def test_parse_header_single_empty(self) -> None:
        p._init_parser(['#'])
        self.assertEqual(p._parse_header(), Paragraph.h1([]))

    def test_parse_header_single(self) -> None:
        p._init_parser(['# A'])
        self.assertEqual(p._parse_header(), Paragraph.h1([Text(' A')]))

    def test_parse_header_single_line_multiple_tokens(self) -> None:
        p._init_parser(['# A ~~ ~~'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h1([Text(' A '), Text('~~'), Text(' '), Text('~~')]))

    def test_parse_header_end(self) -> None:
        p._init_parser(['# A', 'B'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h1([Text(' A')]))

    def test_parse_header_h1(self) -> None:
        p._init_parser(['# A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h1([Text(' A')]))

    def test_parse_header_h2(self) -> None:
        p._init_parser(['## A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h2([Text(' A')]))

    def test_parse_header_h3(self) -> None:
        p._init_parser(['### A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h3([Text(' A')]))

    def test_parse_header_h4(self) -> None:
        p._init_parser(['#### A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h4([Text(' A')]))

    def test_parse_header_h5(self) -> None:
        p._init_parser(['##### A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h5([Text(' A')]))

    def test_parse_header_h6(self) -> None:
        p._init_parser(['###### A'])
        self.assertEqual(
            p._parse_header(),
            Paragraph.h6([Text(' A')]))

    # parse_section_element
    def test_parse_section_element_empty(self) -> None:
        p._init_parser([])
        with self.assertRaises(StopIteration):
            p._parse_section_element('p')

    def test_parse_section_element_header(self) -> None:
        p._init_parser(['# A'])
        self.assertEqual(
            p._parse_section_element('p'),
            Paragraph.h1([Text(' A')]))

    def test_parse_section_element_paragraph(self) -> None:
        p._init_parser(['A'])
        self.assertEqual(
            p._parse_section_element('p'),
            Paragraph([Text('A')]))

    def test_parse_section_element_any_to_paragraph(self) -> None:
        p._init_parser(['~~'])
        self.assertEqual(p._parse_section_element('p'), Text('~~'))

    # parse_document
    def test_parse_document_empty(self) -> None:
        p._init_parser([])
        self.assertEqual(p._parse_document(), Document())

    def test_parse_document_single(self) -> None:
        p._init_parser(['A'])
        self.assertEqual(p._parse_document(), Document([
            Paragraph([Text('A')]),
        ]))

    def test_parse_document_multiple(self) -> None:
        p._init_parser(['A', '', 'B', '', '', '', 'C'])
        self.assertEqual(p._parse_document(), Document([
            Paragraph([Text('A')]),
            Paragraph([Text('B')]),
            Paragraph([Text('C')]),
        ]))

    # parse
    def test_parse_empty(self) -> None:
        self.assertEqual(p.parse([]), Document())

    def test_parse_single(self) -> None:
        source = ['A']
        self.assertEqual(p.parse(source), Document([
            Paragraph([Text('A')]),
        ]))

    def test_parse_multiple(self) -> None:
        source = ['A', '', 'B', '', '', '', 'C']
        self.assertEqual(p.parse(source), Document([
            Paragraph([Text('A')]),
            Paragraph([Text('B')]),
            Paragraph([Text('C')]),
        ]))

    # parse_file
    def test_parse_file_empty(self) -> None:
        with tempfile.NamedTemporaryFile() as f:
            self.assertEqual(p.parse_file(f.name), Document())

    def test_parse_file_single(self) -> None:
        with tempfile.NamedTemporaryFile() as f:
            f.write('A'.encode('utf-8'))
            f.seek(0)
            self.assertEqual(p.parse_file(f.name), Document([
                Paragraph([Text('A')]),
            ]))

    def test_parse_file_multiple(self) -> None:
        with tempfile.NamedTemporaryFile() as f:
            f.write('A\n\nB\n\n\n\nC\n'.encode('utf-8'))
            f.seek(0)
            self.assertEqual(p.parse_file(f.name), Document([
                Paragraph([Text('A')]),
                Paragraph([Text('B')]),
                Paragraph([Text('C')]),
            ]))
